provider "aws" {
  region     = var.region

}

# 1. Create vpc

resource "aws_vpc" "ec2_vpc" {
  cidr_block = var.vpc-cidr
  tags = {
    Name = "terra_test01_ec2_vpc"
  }
}

# 2. Create Internet Gateway

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.ec2_vpc.id
   tags   = {
    Name = "terra_test01_natgw"
  }


}
# 3. Create Custom Route Table

resource "aws_route_table" "ec2_route_table" {
  vpc_id = aws_vpc. ec2_vpc.id
     

  route {
    cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat-gateway-1.id   
  
  }
  tags   = {
    Name = "terra_test01_private_RT"
  }
}
resource "aws_route_table" "public_subnet_rt" {
  vpc_id = aws_vpc. ec2_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags   = {
    Name = "terra_test01_public_RT"
  }
}
# 4. Create a Subnets (private)

resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.ec2_vpc.id
  cidr_block        = var.private_subnet-cidr
  availability_zone = var.az

  tags = {
    Name = "terra_test01_priv_subnet"
  }
}
# 4b. Create a public Subnet (Baston and NAT)

resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.ec2_vpc.id
  cidr_block        = var.public_subneta-cidr
  availability_zone = var.az

  tags = {
    Name = "terra_test01_pub_subnet"
  }


}

# 5. Associate subnet with Route Table
resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.ec2_route_table.id
}
resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_subnet_rt.id

}

# 6. Create Security Group to allow port 22,80,443

resource "aws_security_group" "public_subnet_sg" {
  name        = "public_subnet_sg_all_traffic"
  description = "Allow traffic into the VPC from internet"
  vpc_id      = aws_vpc.ec2_vpc.id


  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    
  }
  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "public_subnet_sg"
  }
}

resource "aws_security_group" "private_subnet_sg" {
  name        = "private_subnet_sg"
  description = "Allow traffic  from  NAT gateway and  public_subnet_sg"
  vpc_id      = aws_vpc.ec2_vpc.id

  
  ingress {
    description     = "Enable SSH to the ec2_instance (VM)"
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    cidr_blocks     = ["0.0.0.0/0"]
    # security_groups = [aws_security_group.public_subnet_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "private_subnet_sg"
  }
}


# 7. Create a network interface with an ip in the in the private subnet that was created in step 4

resource "aws_network_interface" "terra_test01_ec2_nic" {
  subnet_id       = aws_subnet.private_subnet.id
  #private_ips     = ["10.0.2.50"]
  #security_groups = [aws_security_group.public_subnet_sg.id]
  
}

# 8. Create instance - Bastion Host in Public subnet 1
resource "aws_instance" "Bastion-host" {
    ami                         = var.ami
    associate_public_ip_address = true
    instance_type               = var.instance_type
    availability_zone           = var.az
    key_name                    = var.key_name
    subnet_id                   = aws_subnet.public_subnet.id
    #vpc_security_group_ids      = [aws_security_group.public_subnet-sg.id]

    tags     = {
        Name = "Bastion-host"
    }
}


# 9. Create instance - App webserver in Private subnet 1
resource "aws_instance" "terra_test01_ec2-instance" {
    ami                         = var.ami
    associate_public_ip_address = false
    instance_type               = var.instance_type
    availability_zone           = var.az
    key_name                    = var.key_name
    subnet_id                   = aws_subnet.private_subnet.id
    #vpc_security_group_ids      = [aws_security_group.private_subnet_sg.id]
    

   
     tags = {
    "Name" = "test_ec2_instance"
  }
}
# 10 create elastic ip for the nat gateway
resource "aws_eip" "eip_for_nat" {
  vpc                       = true

  #network_interface         = aws_network_interface.terra_test01_ec2_nic.id
  #depends_on                = [aws_internet_gateway.gw]
}

# 11. Create Nat Gateway 1 in Public Subnet 1

resource "aws_nat_gateway" "nat-gateway-1" {
  allocation_id = aws_eip.eip_for_nat.id
  subnet_id     = aws_subnet.public_subnet.id

  
  tags   = {
    Name = "nat_public_subnet"
  }
}


# output "private_ip" {
#   value = aws_instance.terra_test01_ec2-instance.private_ip

# }

# output "public_ip" {
#   value = aws_eip.eip_for_nat.public_ip
# }



